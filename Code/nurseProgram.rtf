{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green120\blue215;\red0\green0\blue0;\red0\green128\blue0;\red255\green0\blue0;\red0\green0\blue255;\red128\green0\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title nurseProgram.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0\i /***********************************************************************
\par  *nurseProgram.c
\par  *A program that allows nurses to enter patient's details
\par  *Candidate number: 181355
\par  *12/2017
\par  **********************************************************************/
\par \i0\cf1  
\par \cf2 #include <stdio.h>
\par #include <string.h>
\par 
\par 
\par #define HEADERLEN 48  \cf0\i /*must be less than or equal to PADDING length*/
\par \i0\cf2 #define PADDING "======================================================"
\par #define OR ||
\par #define AND &&
\par #define KEY 7
\par #define PASSWORDLEN 9
\par #define NURSES 5
\par #define LIMIT 1000
\par #define NAMELIM 26
\par #define FILELIM 51
\par 
\par \cf1\b struct\b0  DOB
\par \cf3\b \{
\par \b0\cf1     \b int\b0  day\cf3\b ;
\par \b0\cf1     \b int\b0  month\cf3\b ;
\par \b0\cf1     \b int\b0  year\cf3\b ;
\par \};
\par 
\par \cf1 struct\b0  patientInfo
\par \cf3\b \{
\par \b0\cf1     \b char\b0  firstName\cf3\b [\b0\cf1 NAMELIM\cf3\b ];
\par \b0\cf1     \b char\b0  lastName\cf3\b [\b0\cf1 NAMELIM\cf3\b ];
\par \b0\cf1     \b struct\b0  DOB dt\cf3\b ;
\par \b0\cf1     \b float\b0  height\cf3\b ;
\par \b0\cf1     \b float\b0  waist\cf3\b ;
\par \b0\cf1     \b float\b0  weight\cf3\b ;
\par \b0\cf1     \b char\b0  comment\cf3\b [\b0\cf1 LIMIT\cf3\b ];\b0\cf1   
\par \cf3\b \};
\par 
\par \cf1 void\b0  displayTitle\cf3\b (\cf1 char\cf3 []);
\par \cf1 void\b0  usernamePassword\cf3\b (\cf1 char\cf3 [],\b0\cf1  \b char\cf3 [],\b0\cf1  \b char\cf3 []);
\par \b0\cf1 _Bool verifyPassword\cf3\b (\cf1 char\cf3 [],\b0\cf1  \b char\cf3 []);
\par \cf1 void\b0  encrypt\cf3\b (\cf1 char\cf3 [],\b0\cf1  \b char\cf3 []);
\par \cf1 char\b0  offset\cf3\b (\cf1 char\cf3 ,\b0\cf1  \b char\cf3 ,\b0\cf1  \b char\cf3 );
\par \b0\cf1 _Bool getStoredPassword\cf3\b (\cf1 char\cf3 [],\b0\cf1  \b char\cf3 []);
\par \cf1 void\b0  patientDataChoice\cf3\b ();
\par \cf1 struct\b0  patientInfo createNewPatient\cf3\b ();
\par \b0\cf1 _Bool writePatientFile\cf3\b (\cf1 struct\b0  patientInfo\cf3\b );
\par \cf1 void\b0  pressAnyToContinue\cf3\b ();
\par \b0\cf1 _Bool confirmYN\cf3\b (\cf1 char\b0  \cf3\b *);
\par \cf1 void\b0  equalsLine\cf3\b ();
\par \cf1 void\b0  errorMessage\cf3\b ();
\par \cf1 void\b0  emptyBuffer\cf3\b ();
\par \cf1 void\b0  writeEncryptedString\cf3\b (\b0\cf1 FILE \cf3\b *,\b0\cf1  \b char\cf3 []);
\par \cf1 void\b0  writeEncryptedName\cf3\b (\b0\cf1 FILE \cf3\b *,\b0\cf1  \b char\cf3 [],\b0\cf1  \b char\cf3 []);
\par \cf1 void\b0  writeEncryptedFloat\cf3\b (\b0\cf1 FILE \cf3\b *,\b0\cf1  \b float\cf3 );
\par \cf1 void\b0  writeEncryptedDate\cf3\b (\b0\cf1 FILE \cf3\b *,\b0\cf1  \b int\cf3 ,\b0\cf1  \b int\cf3 ,\b0\cf1  \b int\cf3 );
\par \cf1 void\b0  encryptWrite\cf3\b (\b0\cf1 FILE \cf3\b *,\b0\cf1  \b char\cf3 []);
\par 
\par \b0\cf0\i /*main entry point*/
\par \i0\cf1\b int\b0  main\cf3\b (\cf1 void\cf3 )
\par \{
\par \b0\cf1     \b char\b0  userAttempt\cf3\b [\b0\cf1 PASSWORDLEN\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  \cf3\b \{\b0\cf1 '\\0'\cf3\b \};
\par \b0\cf1     \b char\b0  passAttempt\cf3\b [\b0\cf1 PASSWORDLEN\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  \cf3\b \{\b0\cf1 '\\0'\cf3\b \};
\par \b0\cf1     \b char\b0  passEncrypted\cf3\b [\b0\cf1 PASSWORDLEN\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  \cf3\b \{\b0\cf1 '\\0'\cf3\b \};
\par \b0\cf1     
\par     displayTitle\cf3\b (\cf4 "Patient Data Entry"\cf3 );
\par \b0\cf1     \cf0\i /*get username and password from user*/
\par \i0\cf1     usernamePassword\cf3\b (\b0\cf1 userAttempt\cf3\b ,\b0\cf1  passAttempt\cf3\b ,\b0\cf1  passEncrypted\cf3\b );
\par \b0\cf1     
\par     \b return\b0  \cf5 0\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*get username and password attempt from user*/
\par \i0\cf1\b void\b0  usernamePassword\cf3\b (\cf1 char\b0  userAttempt\cf3\b [],\b0\cf1  \b char\b0  passAttempt\cf3\b []\b0\cf1  \cf3\b ,
\par \b0\cf1     \b char\b0  passEncrypted\cf3\b [])
\par \{
\par \b0\cf1     \b char\b0  passChar \cf3\b =\b0\cf1  '\\0'\cf3\b ;
\par \b0\cf1     \b int\b0  ii \cf3\b =\b0\cf1  \cf5 0\cf3\b ;
\par \b0\cf1     
\par     printf\cf3\b (\cf4 "\\nPlease enter your username and password below\\n"\cf3 );
\par \b0\cf1     printf\cf3\b (\cf4 "\\nUsername: "\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%25s"\cf3 ,\b0\cf1  userAttempt\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPassword: "\cf3 );
\par \b0\cf1         
\par     \cf0\i /*loop until valid password*/
\par \i0\cf1     \b while\cf3 (\b0\cf5 1\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         passChar \cf3\b =\b0\cf1  getch\cf3\b ();
\par \b0\cf1         
\par         \cf0\i /*if password entered reaches over 8 chars or user hits*/
\par \i0\cf1         \cf0\i /*return end loop*/
\par \i0\cf1         \b if\cf3 (\b0\cf1 passChar \cf3\b ==\b0\cf1  '\\r' OR ii \cf3\b ==\b0\cf1  PASSWORDLEN\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             passAttempt\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  '\\0'\cf3\b ;
\par \b0\cf1             \b break\cf3 ;
\par \b0\cf1         \cf3\b \}
\par \b0\cf1         \cf0\i /*populate password attempt with entered character*/
\par \i0\cf1         passAttempt\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  passChar\cf3\b ;
\par \b0\cf1         \cf0\i /*echo typed character as an **/
\par \i0\cf1         printf\cf3\b (\cf4 "*"\cf3 );
\par \b0\cf1         ii\cf3\b ++;
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     
\par     \cf0\i /*if password entered is correct allow access*/
\par \i0\cf1     \b if\cf3 (\b0\cf1 verifyPassword\cf3\b (\b0\cf1 userAttempt\cf3\b ,\b0\cf1  passAttempt\cf3\b )\b0\cf1  \cf3\b ==\b0\cf1  \cf5 1\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*inform user of success*/
\par \i0\cf1         printf\cf3\b (\cf4 "\\n\\nPassword is correct\\n"\cf3 );
\par \b0\cf1         pressAnyToContinue\cf3\b ();
\par \b0\cf1         system\cf3\b (\cf4 "cls"\cf3 );
\par \b0\cf1         \cf0\i /*asks if they want to create a new patient file*/
\par \i0\cf1         patientDataChoice\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     \b else
\par \b0     \cf3\b \{
\par \b0\cf1         \cf0\i /*inform user of failure and fall through to program exit*/
\par \i0\cf1         printf\cf3\b (\cf4 "\\nPassword/Username incorrect\\n"\cf3 );\b0\cf1         
\par     \cf3\b \}
\par \}
\par 
\par \b0\cf0\i /*verifies if password matches stored password*/
\par \i0\cf1 _Bool verifyPassword\cf3\b (\cf1 char\b0  userAttempt\cf3\b [],\b0\cf1  \b char\b0  passAttempt\cf3\b [])
\par \{
\par \b0\cf1     \b char\b0  attemptHash\cf3\b [\b0\cf1 PASSWORDLEN\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  \cf3\b \{\b0\cf1 '\\0'\cf3\b \};
\par \b0\cf1     \b char\b0  storedHash\cf3\b [\b0\cf1 PASSWORDLEN\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  \cf3\b \{\b0\cf1 '\\0'\cf3\b \};
\par \b0\cf1     _Bool result \cf3\b =\b0\cf1  \cf5 0\cf3\b ;
\par \b0\cf1     
\par     \cf0\i /*get entered password hash*/
\par \i0\cf1     encrypt\cf3\b (\b0\cf1 passAttempt\cf3\b ,\b0\cf1  attemptHash\cf3\b );
\par \b0\cf1  
\par     \cf0\i /*now check this hash against stored passwords*/
\par \i0\cf1     getStoredPassword\cf3\b (\b0\cf1 userAttempt\cf3\b ,\b0\cf1  storedHash\cf3\b );
\par \b0\cf1      
\par     \cf0\i /*do they match?*/
\par \i0\cf1     \b if\cf3 (\b0\cf1 strcmp\cf3\b (\b0\cf1 attemptHash\cf3\b ,\b0\cf1  storedHash\cf3\b )\b0\cf1  \cf3\b ==\b0\cf1  \cf5 0\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         result \cf3\b =\b0\cf1  \cf5 1\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     \b return\b0  result\cf3\b ;\b0\cf1     
\par \cf3\b \}
\par 
\par \b0\cf0\i /*encrypts a string*/
\par \i0\cf1\b void\b0  encrypt\cf3\b (\cf1 char\b0  unEncrypted\cf3\b [],\b0\cf1  \b char\b0  encrypted\cf3\b [])
\par \{
\par \b0\cf1     \b int\b0  ii\cf3\b =\b0\cf5 0\cf3\b ;
\par \b0\cf1     \b char\b0  ch \cf3\b =\b0\cf1  '\\0'\cf3\b ;
\par \b0\cf1     
\par     \cf0\i /*loops through unencrypted string*/
\par \i0\cf1     \b for\cf3 (\b0\cf1 ii\cf3\b =\b0\cf5 0\cf3\b ;\b0\cf1  unEncrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b !=\b0\cf1  '\\0'\cf3\b ;\b0\cf1  ii\cf3\b ++)
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         ch \cf3\b =\b0\cf1  unEncrypted\cf3\b [\b0\cf1 ii\cf3\b ];
\par \b0\cf1         
\par         \b if\cf3 (\b0\cf1 ch \cf3\b >=\b0\cf1  'a' \cf3\b &&\b0\cf1  ch \cf3\b <=\b0\cf1  'z'\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             \cf0\i /*apply offset to lower case alpha*/
\par \i0\cf1             encrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  offset\cf3\b (\b0\cf1 'z'\cf3\b ,\b0\cf1  'a'\cf3\b ,\b0\cf1  ch\cf3\b );
\par \b0\cf1         \cf3\b \}
\par \b0\cf1         \b else
\par \b0         \b if\cf3 (\b0\cf1 ch \cf3\b >=\b0\cf1  'A' \cf3\b &&\b0\cf1  ch \cf3\b <=\b0\cf1  'Z'\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             \cf0\i /*apply offset to upper case alpha*/
\par \i0\cf1             encrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  offset\cf3\b (\b0\cf1 'Z'\cf3\b ,\b0\cf1  'A'\cf3\b ,\b0\cf1  ch\cf3\b );
\par \b0\cf1         \cf3\b \}
\par \b0\cf1         \b else
\par \b0         \b if\cf3 (\b0\cf1 ch \cf3\b >=\b0\cf1  '0' \cf3\b &&\b0\cf1  ch \cf3\b <=\b0\cf1  '9'\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             \cf0\i /*apply offset to digit*/
\par \i0\cf1             encrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  offset\cf3\b (\b0\cf1 '9'\cf3\b ,\b0\cf1  '0'\cf3\b ,\b0\cf1  ch\cf3\b );
\par \b0\cf1         \cf3\b \}
\par \b0\cf1         \b else
\par \b0         \cf3\b \{
\par \b0\cf1             \cf0\i /*no encryption applied to char outside specified ranges*/
\par \i0\cf1             encrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  ch\cf3\b ;
\par \b0\cf1         \cf3\b \}
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     \cf0\i /*terminate encrypted string*/
\par \i0\cf1     encrypted\cf3\b [\b0\cf1 ii\cf3\b ]\b0\cf1  \cf3\b =\b0\cf1  '\\0'\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*applies encryption key to a character, wrapping appropriately*/
\par \i0\cf1\b char\b0  offset\cf3\b (\cf1 char\b0  top\cf3\b ,\b0\cf1  \b char\b0  bottom\cf3\b ,\b0\cf1  \b char\b0  ch\cf3\b )
\par \{
\par \b0\cf1     \cf0\i /*range is difference between highest and lowest value in range*/
\par \i0\cf1     \b int\b0  range \cf3\b =\b0\cf1  \cf3\b (\b0\cf1 top \cf3\b -\b0\cf1  bottom\cf3\b )\b0\cf1  \cf3\b +\b0\cf1  \cf5 1\cf3\b ;
\par \b0\cf1     \cf0\i /*encryption key*/
\par \i0\cf1     \b int\b0  offset \cf3\b =\b0\cf1  \cf5 7\cf3\b ;
\par \b0\cf1     \cf0\i /*wraparound encryption key*/
\par \i0\cf1     \b int\b0  offset1 \cf3\b =\b0\cf1  range \cf3\b -\b0\cf1  offset\cf3\b ;
\par \b0\cf1     \b char\b0  cc \cf3\b =\b0\cf1  ch\cf3\b ;
\par \b0\cf1     
\par     \cf0\i /*do we need to wraparound?*/
\par \i0\cf1     \b if\cf3 (\b0\cf1 cc \cf3\b >\b0\cf1  \cf3\b (\b0\cf1 top \cf3\b -\b0\cf1  offset\cf3\b ))
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*yes*/
\par \i0\cf1         cc \cf3\b -=\b0\cf1  offset1\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     \b else
\par \b0     \cf3\b \{
\par \b0\cf1         \cf0\i /*no*/
\par \i0\cf1         cc \cf3\b +=\b0\cf1  offset\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par 
\par \b0\cf1     \cf0\i /*return encrypted character*/
\par \i0\cf1     \b return\b0  cc\cf3\b ;
\par \}
\par 
\par 
\par \b0\cf0\i /*gets stored password hash for entered username*/
\par \i0\cf1 _Bool getStoredPassword\cf3\b (\cf1 char\b0  userAttempt\cf3\b [],\b0\cf1  \b char\b0  storedHash\cf3\b [])
\par \{
\par \b0\cf1     FILE \cf3\b *\b0\cf1 ptrFile\cf3\b ;
\par \b0\cf1     \b char\b0  buf\cf3\b [\b0\cf5 1000\cf3\b ];
\par \b0\cf1     \b char\b0  ss\cf3\b []\b0\cf1  \cf3\b =\b0\cf1  \cf4\b ":\\n"\cf3 ;
\par \b0\cf1     _Bool result \cf3\b =\b0\cf1  \cf5 0\cf3\b ;
\par 
\par \b0\cf1     \cf0\i /*open the file*/
\par \i0\cf1     ptrFile \cf3\b =\b0\cf1  fopen\cf3\b (\cf4 "users.txt"\cf3 ,\b0\cf1  \cf4\b "r"\cf3 );
\par \b0\cf1     \b if\b0  \cf3\b (!\b0\cf1 ptrFile\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*report error here*/
\par \i0\cf1         printf\cf3\b (\cf4 "\\nunable to read password file\\n"\cf3 );
\par \b0\cf1         \b return\b0  result\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par 
\par \b0\cf1     \cf0\i /*get each line in the file,'\\n' terminated (max 1000 char length)*/
\par \i0\cf1     \b while\b0  \cf3\b (\b0\cf1 fgets\cf3\b (\b0\cf1 buf\cf3\b ,\b0\cf1  \cf5 1000\cf3\b ,\b0\cf1  ptrFile\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  NULL\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*tokenize each line*/
\par \i0\cf1         \b char\b0  \cf3\b *\b0\cf1 token\cf3\b ;
\par 
\par \b0\cf1         \cf0\i /*get the first token, which is stored username*/
\par \i0\cf1         token \cf3\b =\b0\cf1  strtok\cf3\b (\b0\cf1 buf\cf3\b ,\b0\cf1  ss\cf3\b );
\par 
\par \b0\cf1         \cf0\i /*did we get a token?*/
\par \i0\cf1         \b if\b0  \cf3\b (\b0\cf1 token \cf3\b !=\b0\cf1  NULL\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             \cf0\i /*does the stored username match entered username?*/
\par \i0\cf1             \b if\cf3 (\b0\cf1 strcmp\cf3\b (\b0\cf1 token\cf3\b ,\b0\cf1 userAttempt\cf3\b )\b0\cf1  \cf3\b ==\b0\cf1  \cf5 0\cf3\b )
\par \b0\cf1             \cf3\b \{
\par \b0\cf1                 \cf0\i /*they match, so get next token (stored password)*/
\par \i0\cf1                 token \cf3\b =\b0\cf1  strtok\cf3\b (\b0\cf1 NULL\cf3\b ,\b0\cf1  ss\cf3\b );
\par \b0\cf1         
\par                 \cf0\i /*did we get the password token?*/
\par \i0\cf1                 \b if\cf3 (\b0\cf1 token \cf3\b !=\b0\cf1  NULL\cf3\b )
\par \b0\cf1                 \cf3\b \{
\par \b0\cf1                     \cf0\i /*put stored password into stored hash*/
\par \i0\cf1                     strcpy\cf3\b (\b0\cf1 storedHash\cf3\b ,\b0\cf1  token\cf3\b );\b0\cf1     
\par                     result \cf3\b =\b0\cf1  \cf5 1\cf3\b ;
\par \b0\cf1                     \cf0\i /*break out of file reading loop*/
\par \i0\cf1                     \b break\cf3 ;
\par \b0\cf1                 \cf3\b \}\b0\cf1         
\par             \cf3\b \}
\par \b0\cf1         \cf3\b \}
\par \b0\cf1     \cf3\b \}
\par 
\par \b0\cf1     \cf0\i /*close users file*/
\par \i0\cf1     fclose\cf3\b (\b0\cf1 ptrFile\cf3\b );
\par \b0\cf1     \b return\b0  result\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*asks user if they want to create a new patient file*/
\par \i0\cf1\b void\b0  patientDataChoice\cf3\b ()
\par \{
\par \b0\cf1     displayTitle\cf3\b (\cf4 "Patient Data Entry"\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 confirmYN\cf3\b (\cf4 "\\nDo you wish to create a"\b0\cf1  
\par         \cf4\b " new patient file?(Y/N): "\cf3 )\b0\cf1  \cf3\b ==\b0\cf1  \cf5 1\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*get patient details and write to file*/
\par \i0\cf1         \b if\cf3 (\b0\cf1 writePatientFile\cf3\b (\b0\cf1 createNewPatient\cf3\b ())\b0\cf1  \cf3\b ==\b0\cf1  \cf5 1\cf3\b )
\par \b0\cf1         \cf3\b \{
\par \b0\cf1             printf\cf3\b (\cf4 "\\nFile written successfully"\cf3 );
\par \b0\cf1         \cf3\b \}
\par \b0\cf1         \b else
\par \b0         \cf3\b \{
\par \b0\cf1             printf\cf3\b (\cf4 "\\nFile not written"\cf3 );
\par \b0\cf1         \cf3\b \}
\par \b0\cf1     \cf3\b \}
\par \}
\par 
\par \b0\cf0\i /*asks user for patient info and stores in a structure*/
\par \i0\cf1\b struct\b0  patientInfo createNewPatient\cf3\b ()
\par \{
\par \b0\cf1     \b struct\b0  patientInfo patient\cf3\b ;
\par \b0\cf1     
\par     printf\cf3\b (\cf4 "\\nEnter patient's first name: "\cf3 );
\par \b0\cf1     scanf\cf3\b (\cf4 "%25s"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 firstName\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "\\nEnter patient's last name: "\cf3 );
\par \b0\cf1     scanf\cf3\b (\cf4 "%25s"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 lastName\cf3\b );
\par \b0\cf1     
\par     \cf0\i /*populate date struct nested within patient struct*/
\par \i0\cf1     printf\cf3\b (\cf4 "\\nEnter the patient's D.O.B in the form (DD/MM/YYYY): "\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%d/%d/%d"\cf3 ,\b0\cf1  \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day\cf3\b ,\b0\cf1  \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month\cf3\b ,\b0\cf1  
\par         \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 3\cf1  OR patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day \cf3\b <\b0\cf1  \cf5 1\cf1  OR 
\par         patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day \cf3\b >\b0\cf1  \cf5 31\cf1  OR patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month \cf3\b <\b0\cf1  \cf5 1\cf1  OR 
\par         patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month \cf3\b >\b0\cf1  \cf5 12\cf1  OR patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year \cf3\b <\b0\cf1  \cf5 1900\cf1  OR 
\par         patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year \cf3\b >\b0\cf5 2017\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPlease enter the patient's height in cm: "\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%f"\cf3 ,\b0\cf1  \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 height\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf1  OR patient\cf3\b .\b0\cf1 height \cf3\b <\b0\cf1  \cf5 25\cf1  OR 
\par         patient\cf3\b .\b0\cf1 height \cf3\b >\b0\cf1  \cf5 250\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPlease enter the patient's waist measurement in cm: "\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%f"\cf3 ,\b0\cf1  \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 waist\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf1  OR patient\cf3\b .\b0\cf1 waist \cf3\b <\b0\cf1  \cf5 40\cf1  OR 
\par         patient\cf3\b .\b0\cf1 waist \cf3\b >\b0\cf1  \cf5 300\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPlease enter the patient's weight in kg: "\cf3 );
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%f"\cf3 ,\b0\cf1  \cf3\b &\b0\cf1 patient\cf3\b .\b0\cf1 weight\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf1  OR patient\cf3\b .\b0\cf1 weight \cf3\b <\b0\cf1  \cf5 1\cf1  OR 
\par         patient\cf3\b .\b0\cf1 weight \cf3\b >\b0\cf1  \cf5 300\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPlease enter a comment for the patient: "\cf3 );
\par \b0\cf1     emptyBuffer\cf3\b ();
\par \b0\cf1     \b while\cf3 (\b0\cf1 scanf\cf3\b (\cf4 "%1000[^\\n]"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 comment\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         errorMessage\cf3\b ();
\par \b0\cf1     \cf3\b \}\b0\cf1  
\par                        
\par     \cf0\i /*returns populated patient struct*/
\par \i0\cf1     \b return\b0  patient\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*display entered details on screen then writes to a file*/
\par \i0\cf1 _Bool writePatientFile\cf3\b (\cf1 struct\b0  patientInfo patient\cf3\b )
\par \{
\par \b0\cf1     FILE \cf3\b *\b0\cf1 ptrFile\cf3\b ;
\par \b0\cf1     \b char\b0  fileName\cf3\b [\b0\cf1 FILELIM\cf3\b ];\b0\cf1  
\par     \b char\b0  tmp\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     printf\cf3\b (\cf4 "\\nFirst name: %s\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 firstName\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "Last name:    %s\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 lastName\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "D.O.B:        %02d/%02d/%04d\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day\cf3\b ,\b0\cf1  
\par      patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "Height:       %5.02f\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 height\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "Waist:        %5.02f\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 waist\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "Weight:       %5.02f\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 weight\cf3\b );
\par \b0\cf1     printf\cf3\b (\cf4 "Comment:      %s\\n"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 comment\cf3\b );
\par 
\par \b0\cf1     \cf0\i /*generates patient specific file name*/
\par \i0\cf1     sprintf\cf3\b (\b0\cf1 fileName\cf3\b ,\b0\cf1  \cf4\b "%s%04d%02d%02d.aow\\0"\cf3 ,\b0\cf1  patient\cf3\b .\b0\cf1 lastName\cf3\b ,
\par \b0\cf1         patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year\cf3\b ,\b0\cf1 patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month\cf3\b ,\b0\cf1 patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day\cf3\b );
\par \b0\cf1     
\par     \cf0\i /*opens file, overwrites file if already exists*/
\par \i0\cf1     ptrFile \cf3\b =\b0\cf1  fopen\cf3\b (\b0\cf1 fileName\cf3\b ,\b0\cf1  \cf4\b "w"\cf3 );
\par 
\par \b0\cf1     \b if\b0  \cf3\b (!\b0\cf1 ptrFile\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*failed to open file*/
\par \i0\cf1         \b return\b0  \cf5 0\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par 
\par \b0\cf1     \cf0\i /*encrypts data and writes to file*/
\par \i0\cf1     writeEncryptedName\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 firstName\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 lastName\cf3\b );
\par \b0\cf1     writeEncryptedDate\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 day\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 month\cf3\b ,\b0\cf1  
\par         patient\cf3\b .\b0\cf1 dt\cf3\b .\b0\cf1 year\cf3\b );
\par \b0\cf1     writeEncryptedFloat\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 height\cf3\b );
\par \b0\cf1     writeEncryptedFloat\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 waist\cf3\b );
\par \b0\cf1     writeEncryptedFloat\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 weight\cf3\b );
\par \b0\cf1     writeEncryptedString\cf3\b (\b0\cf1 ptrFile\cf3\b ,\b0\cf1  patient\cf3\b .\b0\cf1 comment\cf3\b );
\par 
\par \b0\cf1     \cf0\i /*closes file*/
\par \i0\cf1     fclose\cf3\b (\b0\cf1 ptrFile\cf3\b );
\par 
\par \b0\cf1     \b return\b0  \cf5 1\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*encrypt and write a string to file*/
\par \i0\cf1\b void\b0  writeEncryptedString\cf3\b (\b0\cf1 FILE \cf3\b *\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \b char\b0  unEncrypted\cf3\b [])
\par \{
\par \b0\cf1     \b char\b0  encrypted\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     encrypt\cf3\b (\b0\cf1 unEncrypted\cf3\b ,\b0\cf1  encrypted\cf3\b );
\par \b0\cf1     fprintf\cf3\b (\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \cf4\b "%s\\n"\cf3 ,\b0\cf1  encrypted\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*format name into singular string and encrypt then write to file*/
\par \i0\cf1\b void\b0  writeEncryptedName\cf3\b (\b0\cf1 FILE \cf3\b *\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \b char\b0  unEncryptedA\cf3\b [],
\par \b0\cf1      \b char\b0  unEncryptedB\cf3\b [])
\par \{
\par \b0\cf1     \b char\b0  tmp\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     \b char\b0  encrypted\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     \cf0\i /*formats full name into temporary string*/
\par \i0\cf1     sprintf\cf3\b (\b0\cf1 tmp\cf3\b ,\b0\cf1  \cf4\b "%s %s"\cf3 ,\b0\cf1  unEncryptedA\cf3\b ,\b0\cf1  unEncryptedB\cf3\b );
\par \b0\cf1     
\par     \cf0\i /*encrypt then write string to file*/
\par \i0\cf1     encryptWrite\cf3\b (\b0\cf1 ptrfile\cf3\b ,\b0\cf1  tmp\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*format float into string then encrypt and write to file*/
\par \i0\cf1\b void\b0  writeEncryptedFloat\cf3\b (\b0\cf1 FILE \cf3\b *\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \b float\b0  unEncrypted\cf3\b )
\par \{
\par \b0\cf1     \b char\b0  tmp\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     \b char\b0  encrypted\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     sprintf\cf3\b (\b0\cf1 tmp\cf3\b ,\b0\cf1  \cf4\b "%5.02f"\cf3 ,\b0\cf1  unEncrypted\cf3\b );
\par \b0\cf1     
\par     encryptWrite\cf3\b (\b0\cf1 ptrfile\cf3\b ,\b0\cf1  tmp\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*format date into string then encrypt and write to file*/
\par \i0\cf1\b void\b0  writeEncryptedDate\cf3\b (\b0\cf1 FILE \cf3\b *\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \b int\b0  unEncryptedDD\cf3\b ,\b0\cf1  
\par     \b int\b0  unEncryptedMM\cf3\b ,\b0\cf1  \b int\b0  unEncryptedYYYY\cf3\b )
\par \{
\par \b0\cf1     \b char\b0  tmp\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     \b char\b0  encrypted\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     sprintf\cf3\b (\b0\cf1 tmp\cf3\b ,\b0\cf1  \cf4\b "%02d/%02d/%04d"\cf3 ,\b0\cf1  unEncryptedDD\cf3\b ,\b0\cf1  unEncryptedMM\cf3\b ,\b0\cf1  
\par         unEncryptedYYYY\cf3\b );
\par \b0\cf1     
\par     encryptWrite\cf3\b (\b0\cf1 ptrfile\cf3\b ,\b0\cf1  tmp\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*encrypt string and write to file*/
\par \i0\cf1\b void\b0  encryptWrite\cf3\b (\b0\cf1 FILE \cf3\b *\b0\cf1 ptrfile\cf3\b ,\b0\cf1  \b char\b0  unEncrypted\cf3\b [])
\par \{
\par \b0\cf1     \b char\b0  encrypted\cf3\b [\b0\cf1 LIMIT\cf3\b ];
\par \b0\cf1     
\par     encrypt\cf3\b (\b0\cf1 unEncrypted\cf3\b ,\b0\cf1  encrypted\cf3\b );
\par \b0\cf1  
\par     fprintf\cf3\b (\b0\cf1 ptrfile\cf3\b ,\cf4 "%s\\n"\cf3 ,\b0\cf1  encrypted\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*wait for user input*/
\par \i0\cf1\b void\b0  pressAnyToContinue\cf3\b ()
\par \{
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPress any key to continue"\cf3 );
\par \b0\cf1     _getch\cf3\b ();
\par \}
\par 
\par \b0\cf0\i /*displays title between two lines of '='*/
\par \i0\cf1\b void\b0  displayTitle\cf3\b (\cf1 char\b0  \cf3\b *\b0\cf1 title\cf3\b )
\par \{
\par \b0\cf1     
\par     equalsLine\cf3\b ();
\par 
\par \b0\cf1     \cf0\i /*calculate available space on line / 2*/
\par \i0\cf1     \b int\b0  len \cf3\b =\b0\cf1  \cf3\b (\b0\cf1 HEADERLEN\cf3\b -\b0\cf1 strlen\cf3\b (\b0\cf1 title\cf3\b ))/\b0\cf5 2\cf3\b ;
\par \b0\cf1     
\par     \cf0\i /*prints the title padded with appropriate number of spaces*/
\par \i0\cf1     printf\cf3\b (\cf4 "%*.*s%s\\n"\cf3 ,\b0\cf1  len\cf3\b ,\b0\cf1  len\cf3\b ,\b0\cf1  \cf4\b " "\cf3 ,\b0\cf1  title\cf3\b );
\par \b0\cf1     
\par     equalsLine\cf3\b ();
\par \}
\par 
\par \b0\cf0\i /*prints out a line of equals of length constant PADDING*/
\par \i0\cf1\b void\b0  equalsLine\cf3\b ()
\par \{
\par \b0\cf1     printf\cf3\b (\cf4 "%*.*s\\n"\cf3 ,\b0\cf1  HEADERLEN\cf3\b ,\b0\cf1  HEADERLEN\cf3\b ,\b0\cf1  PADDING\cf3\b );
\par \}
\par 
\par \b0\cf0\i /*this function is used for every (Y/N) question*/
\par \i0\cf1 _Bool confirmYN\cf3\b (\cf1 char\b0  \cf3\b *\b0\cf1 message\cf3\b )
\par \{
\par \b0\cf1     _Bool result \cf3\b =\b0\cf1  \cf5 0\cf3\b ;
\par 
\par \b0\cf1     \cf0\i /*show the question prompt*/
\par \i0\cf1     printf\cf3\b (\b0\cf1 message\cf3\b );
\par 
\par \b0\cf1     \cf0\i /*get their answer*/
\par \i0\cf1     \b char\b0  answer \cf3\b =\b0\cf1  '\\0'\cf3\b ;
\par \b0\cf1     emptyBuffer\cf3\b ();
\par \b0\cf1     
\par     \b while\cf3 ((\b0\cf1 scanf\cf3\b (\cf4 "%c"\cf3 ,\b0\cf1  \cf3\b &\b0\cf1 answer\cf3\b )\b0\cf1  \cf3\b !=\b0\cf1  \cf5 1\cf3\b )\b0\cf1  OR \cf3\b (\b0\cf1 answer \cf3\b !=\b0\cf1  'Y' AND 
\par             answer \cf3\b !=\b0\cf1  'y' AND answer \cf3\b !=\b0\cf1  'N' AND answer \cf3\b !=\b0\cf1  'n'\cf3\b ))
\par \b0\cf1 	\cf3\b \{\b0\cf1 	
\par         errorMessage\cf3\b ();\b0\cf1         
\par 	\cf3\b \}
\par 
\par \b0\cf1     \b if\b0  \cf3\b (\b0\cf1 answer \cf3\b ==\b0\cf1  'y' OR answer \cf3\b ==\b0\cf1  'Y'\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf0\i /*confirmed*/
\par \i0\cf1         result \cf3\b =\b0\cf1  \cf5 1\cf3\b ;
\par \b0\cf1     \cf3\b \}
\par 
\par \b0\cf1     \b return\b0  result\cf3\b ;
\par \}
\par 
\par \b0\cf0\i /*prints error message*/
\par \i0\cf1\b void\b0  errorMessage\cf3\b ()
\par \{
\par \b0\cf1     printf\cf3\b (\cf4 "\\nInvalid value\\n"\cf3 );
\par \b0\cf1     printf\cf3\b (\cf4 "\\nPlease try again: "\cf3 );
\par \b0\cf1     emptyBuffer\cf3\b ();
\par \}
\par 
\par \b0\cf0\i /*clears the buffer*/
\par \i0\cf1\b void\b0  emptyBuffer\cf3\b ()
\par \{
\par \b0\cf1     \b while\cf3 (\b0\cf1 getchar\cf3\b ()\b0\cf1  \cf3\b !=\b0\cf1  '\\n'\cf3\b )
\par \b0\cf1     \cf3\b \{
\par \b0\cf1         \cf3\b ;
\par \b0\cf1     \cf3\b \}
\par \}
\par }